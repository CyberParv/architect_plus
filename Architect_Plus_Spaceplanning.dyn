{
  "Uuid": "1f591253-2c51-44d1-84b1-d8ee554f2091",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Architect_Plus_Spaceplanning_Complete",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "be1c7d402b074a47b1092f29a30f547a",
      "Name": "JSON File Path",
      "Type": "string",
      "Type2": "string",
      "Value": "output/enhanced_design.json",
      "Description": "Creates a string."
    },
    {
      "Id": "271d53b4e3b949a39712a84017723ad0",
      "Name": "Design Seed",
      "Type": "number",
      "Type2": "number",
      "Value": "50",
      "MaximumValue": 100.0,
      "MinimumValue": 1.0,
      "StepValue": 1.0,
      "NumberType": "Integer",
      "Description": "Produces integer values"
    },
    {
      "Id": "e0ba4d89132742aabb70a0b892badad5",
      "Name": "Circulation Factor",
      "Type": "number",
      "Type2": "number",
      "Value": "1.8",
      "MaximumValue": 3.0,
      "MinimumValue": 1.0,
      "StepValue": 0.1,
      "NumberType": "Double",
      "Description": "Produces numeric values"
    },
    {
      "Id": "1d28c5f1e3bc4ada98e3438546b6deb5",
      "Name": "Acceptable Width",
      "Type": "number",
      "Type2": "number",
      "Value": "18",
      "MaximumValue": 30.0,
      "MinimumValue": 5.0,
      "StepValue": 0.5,
      "NumberType": "Double",
      "Description": "Produces numeric values"
    }
  ],
  "Outputs": [
    {
      "Id": "d165e94d4ac1437280da404ce24df970",
      "Name": "Department Polygons",
      "Type": "unknown",
      "InitialValue": "",
      "Description": "Visualizes a node's output"
    }
  ],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "SerializedWidth": 0.0,
      "SerializedHeight": 0.0,
      "Id": "be1c7d402b074a47b1092f29a30f547a",
      "NodeType": "StringInputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "7ef2c2dbb52947f6a8fd3bde80b01440",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string.",
      "InputValue": "output/enhanced_design.json"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NumberType": "Integer",
      "MaximumValue": 100,
      "MinimumValue": 1,
      "StepValue": 1,
      "Id": "271d53b4e3b949a39712a84017723ad0",
      "NodeType": "NumberInputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6b961f78f1634d33bb44850d719016bb",
          "Name": "",
          "Description": "Int64",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Produces integer values",
      "InputValue": 50
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NumberType": "Double",
      "MaximumValue": 3.0,
      "MinimumValue": 1.0,
      "StepValue": 0.1,
      "Id": "e0ba4d89132742aabb70a0b892badad5",
      "NodeType": "NumberInputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "71bc643fbd504787a6a6107750eb1466",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Produces numeric values",
      "InputValue": 1.8
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NumberType": "Double",
      "MaximumValue": 30.0,
      "MinimumValue": 5.0,
      "StepValue": 0.5,
      "Id": "1d28c5f1e3bc4ada98e3438546b6deb5",
      "NodeType": "NumberInputNode",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "b453dc7a883a4bb8961e7fc199649362",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Produces numeric values",
      "InputValue": 18.0
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "Code": "# Add imports\nimport sys\nimport os\nimport json\nimport traceback\nimport math\nimport random\n\n# Load required libraries\nimport clr\nclr.AddReference('ProtoGeometry')\nclr.AddReference('DSCoreNodes')\n\n# Import geometry classes\nfrom Autodesk.DesignScript.Geometry import Point, Line, Surface, Polygon, Vector, Solid, CoordinateSystem\nfrom DSCore import Color\n\n# Get inputs\njson_path = IN[0] if IN[0] else \"output/enhanced_design.json\"\ndesign_seed = IN[1] if len(IN) > 1 else 50\ncirculation_factor = IN[2] if len(IN) > 2 else 1.8\nacceptable_width = IN[3] if len(IN) > 3 else 18.0\n\n# Set random seed for consistent colors\nrandom.seed(design_seed)\n\ndef create_color(r, g, b, a=255):\n    return Color.ByARGB(a, r, g, b)\n\ndef generate_random_color(alpha=255):\n    return Color.ByARGB(alpha, random.randint(0, 255), random.randint(0, 255), random.randint(0, 255))\n\ndef create_extruded_polygon(points, height, color):\n    # Create base polygon\n    base_points = [Point.ByCoordinates(x, y, 0) for x, y in points]\n    base_polygon = Polygon.ByPoints(base_points)\n    \n    # Create solid by extrusion\n    vector = Vector.ByCoordinates(0, 0, height)\n    solid = base_polygon.Extrude(vector)\n    \n    return solid, color\n\ntry:\n    # Read the JSON file\n    with open(json_path, 'r') as f:\n        design_data = json.load(f)\n    \n    # Initialize result lists\n    department_geometry = []\n    program_geometry = []\n    circulation_geometry = []\n    walls = []\n    structural_elements = []\n    \n    # Process raw spaceplanning data\n    if 'raw_spaceplanning' in design_data:\n        raw_data = design_data['raw_spaceplanning']\n        \n        # Process departments and their polygons\n        for dept in raw_data.get('departments', []):\n            dept_color = generate_random_color(200)\n            \n            # Create department geometry\n            if 'DepartmentPolygon' in dept and 'points' in dept['DepartmentPolygon']:\n                points = dept['DepartmentPolygon']['points']\n                height = max([prog.get('Height', 3.0) for prog in dept.get('ProgramsInDept', [])] or [3.0])\n                solid, color = create_extruded_polygon(points, height, dept_color)\n                department_geometry.append((solid, color, dept.get('DeptName', 'Unknown')))\n            \n            # Process programs within department\n            for prog in dept.get('ProgramsInDept', []):\n                if 'ProgramPolygon' in prog and 'points' in prog['ProgramPolygon']:\n                    points = prog['ProgramPolygon']['points']\n                    height = prog.get('Height', 3.0)\n                    # Create slightly lighter color for programs\n                    prog_color = Color.ByARGB(180, \n                                             min(dept_color.Red + 30, 255),\n                                             min(dept_color.Green + 30, 255),\n                                             min(dept_color.Blue + 30, 255))\n                    solid, color = create_extruded_polygon(points, height, prog_color)\n                    program_geometry.append((solid, color, prog.get('ProgramName', 'Unknown')))\n        \n        # Process circulation paths\n        if 'circulation' in raw_data and 'paths' in raw_data['circulation']:\n            circ_color = create_color(150, 150, 150, 180)\n            for path in raw_data['circulation']['paths']:\n                start = path['start']\n                end = path['end']\n                width = path.get('width', 2.0)\n                \n                # Create path centerline\n                start_pt = Point.ByCoordinates(start[0], start[1], 0)\n                end_pt = Point.ByCoordinates(end[0], end[1], 0)\n                centerline = Line.ByStartPointEndPoint(start_pt, end_pt)\n                \n                # Create circulation corridor\n                direction = Vector.ByTwoPoints(start_pt, end_pt).Normalize()\n                perpendicular = direction.Cross(Vector.ByCoordinates(0, 0, 1)).Normalize()\n                \n                # Create corridor polygon points\n                p1 = start_pt.Add(perpendicular.Scale(width/2))\n                p2 = end_pt.Add(perpendicular.Scale(width/2))\n                p3 = end_pt.Add(perpendicular.Scale(-width/2))\n                p4 = start_pt.Add(perpendicular.Scale(-width/2))\n                \n                corridor_polygon = Polygon.ByPoints([p1, p2, p3, p4])\n                corridor_solid = corridor_polygon.Extrude(Vector.ByCoordinates(0, 0, 3.0))\n                circulation_geometry.append((corridor_solid, circ_color, 'Circulation'))\n    \n    # Process building elements from design data\n    if 'design' in design_data:\n        design = design_data['design']\n        \n        # Process walls\n        wall_color = create_color(200, 200, 200)\n        for wall in design.get('walls', []):\n            start = wall['start']\n            end = wall['end']\n            height = wall.get('height', 3.0)\n            thickness = wall.get('thickness', 0.2)\n            \n            start_pt = Point.ByCoordinates(start['x'], start['y'], start['z'])\n            end_pt = Point.ByCoordinates(end['x'], end['y'], end['z'])\n            \n            # Create wall geometry similar to circulation corridors\n            direction = Vector.ByTwoPoints(start_pt, end_pt).Normalize()\n            perpendicular = direction.Cross(Vector.ByCoordinates(0, 0, 1)).Normalize()\n            \n            p1 = start_pt.Add(perpendicular.Scale(thickness/2))\n            p2 = end_pt.Add(perpendicular.Scale(thickness/2))\n            p3 = end_pt.Add(perpendicular.Scale(-thickness/2))\n            p4 = start_pt.Add(perpendicular.Scale(-thickness/2))\n            \n            wall_polygon = Polygon.ByPoints([p1, p2, p3, p4])\n            wall_solid = wall_polygon.Extrude(Vector.ByCoordinates(0, 0, height))\n            walls.append((wall_solid, wall_color, 'Wall'))\n        \n        # Process structural elements\n        struct_color = create_color(100, 100, 100)\n        for struct in design.get('structural', []):\n            if struct['type'] == 'column':\n                pos = struct['position']\n                diameter = struct.get('diameter', 0.4)\n                height = struct.get('height', 3.0)\n                \n                # Create column as cylinder\n                base_pt = Point.ByCoordinates(pos['x'], pos['y'], pos['z'])\n                cs = CoordinateSystem.ByOrigin(base_pt)\n                circle = Circle.ByCenterPointRadius(cs, diameter/2)\n                column = circle.Extrude(Vector.ByCoordinates(0, 0, height))\n                structural_elements.append((column, struct_color, 'Column'))\n    \n    # Return all geometry with their colors and labels\n    OUT = [\n        department_geometry,   # (solid, color, name) tuples for departments\n        program_geometry,      # (solid, color, name) tuples for programs\n        circulation_geometry,  # (solid, color, name) tuples for circulation\n        walls,                # (solid, color, name) tuples for walls\n        structural_elements   # (solid, color, name) tuples for structural elements\n    ]\n    \nexcept Exception as e:\n    # Return error message if something goes wrong\n    OUT = [str(e), traceback.format_exc()]",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "f2dc91b0831d4fe8b6bd625614344175",
      "NodeType": "PythonScriptNode",
      "Inputs": [
        {
          "Id": "d801824134fa432c99bdc438da13f062",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "70bb03ef4cd3429980c3237f62844f73",
          "Name": "IN[1]",
          "Description": "Input #1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "16f5244085d9475f9cdc366e58442ea3",
          "Name": "IN[2]",
          "Description": "Input #2",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e753f5ce0d424c259423bfcf6b12ba99",
          "Name": "IN[3]",
          "Description": "Input #3",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "4932e867dec4491c8f6f337d62478873",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "WatchWidth": 200.0,
      "WatchHeight": 200.0,
      "Id": "d165e94d4ac1437280da404ce24df970",
      "NodeType": "ExtensionNode",
      "Inputs": [
        {
          "Id": "14ea4f55abc84b75810a6ba596fff9cb",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "aa13431c564643f898c65f687b84e3cf",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "WatchWidth": 200.0,
      "WatchHeight": 200.0,
      "Id": "programPolygonsWatch",
      "NodeType": "ExtensionNode",
      "Inputs": [
        {
          "Id": "programPolygonsInput",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "programPolygonsOutput",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "WatchWidth": 200.0,
      "WatchHeight": 200.0,
      "Id": "circulationPathsWatch",
      "NodeType": "ExtensionNode",
      "Inputs": [
        {
          "Id": "circulationPathsInput",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "circulationPathsOutput",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualizes a node's output"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "departmentPolygonsSelector",
      "Inputs": [
        {
          "Id": "departmentPolygonsList",
          "Name": "list",
          "Description": "List to get item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "departmentPolygonsIndex",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "departmentPolygonsOutput",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "programPolygonsSelector",
      "Inputs": [
        {
          "Id": "programPolygonsList",
          "Name": "list",
          "Description": "List to get item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "programPolygonsIndex",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "programPolygonsOutput",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "circulationPathsSelector",
      "Inputs": [
        {
          "Id": "circulationPathsList",
          "Name": "list",
          "Description": "List to get item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "circulationPathsIndex",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "circulationPathsOutput",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 0,
      "MaximumValue": 2,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "outputSelector0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "outputSelector0Out",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 1,
      "MaximumValue": 2,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "outputSelector1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "outputSelector1Out",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "CoreNodeModels.Input.IntegerSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Integer",
      "InputValue": 2,
      "MaximumValue": 2,
      "MinimumValue": 0,
      "StepValue": 1,
      "Id": "outputSelector2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "outputSelector2Out",
          "Name": "",
          "Description": "Int32",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "A slider that produces integer values."
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Geometry.Translate@double,double,double",
      "Id": "geometryTranslator",
      "Inputs": [
        {
          "Id": "geometryInput",
          "Name": "geometry",
          "Description": "Geometry to translate\n\nGeometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "xTranslation",
          "Name": "xTranslation",
          "Description": "Translation along X-axis\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "yTranslation",
          "Name": "yTranslation",
          "Description": "Translation along Y-axis\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "zTranslation",
          "Name": "zTranslation",
          "Description": "Translation along Z-axis\n\ndouble",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "translatedGeometry",
          "Name": "Geometry",
          "Description": "Translated Geometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Translates any geometry type by the given distances in the x, y, and z directions.\n\nGeometry.Translate (xTranslation: double, yTranslation: double, zTranslation: double): Geometry"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Display.ByGeometryColor@Autodesk.DesignScript.Geometry.Geometry,DSCore.Color",
      "Id": "displayGeometry",
      "Inputs": [
        {
          "Id": "geometryToDisplay",
          "Name": "geometry",
          "Description": "The geometry to which you would like to apply color.\n\nGeometry",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "colorInput",
          "Name": "color",
          "Description": "The color.\n\nColor",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "displayOutput",
          "Name": "Display",
          "Description": "A Display object.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Display geometry using a color.\n\nDisplay.ByGeometryColor (geometry: Geometry, color: Color): Display"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 50.0,
      "MinimumValue": -50.0,
      "StepValue": 1.0,
      "Id": "xOffset",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "xOffsetOut",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "X Offset",
      "InputValue": 0.0
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 50.0,
      "MinimumValue": -50.0,
      "StepValue": 1.0,
      "Id": "yOffset",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "yOffsetOut",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Y Offset",
      "InputValue": 0.0
    },
    {
      "ConcreteType": "CoreNodeModels.Input.DoubleSlider, CoreNodeModels",
      "NodeType": "NumberInputNode",
      "NumberType": "Double",
      "MaximumValue": 50.0,
      "MinimumValue": -50.0,
      "StepValue": 1.0,
      "Id": "zOffset",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "zOffsetOut",
          "Name": "",
          "Description": "Double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Z Offset",
      "InputValue": 0.0
    }
  ],
  "Connectors": [
    {
      "Start": "7ef2c2dbb52947f6a8fd3bde80b01440",
      "End": "d801824134fa432c99bdc438da13f062",
      "Id": "2542fd0780964fd6827fd332da387df2",
      "IsHidden": "False"
    },
    {
      "Start": "6b961f78f1634d33bb44850d719016bb",
      "End": "70bb03ef4cd3429980c3237f62844f73",
      "Id": "2314090da5b84f18948deb16210dae65",
      "IsHidden": "False"
    },
    {
      "Start": "71bc643fbd504787a6a6107750eb1466",
      "End": "16f5244085d9475f9cdc366e58442ea3",
      "Id": "df4f3e83206642e288fbc87f65316d26",
      "IsHidden": "False"
    },
    {
      "Start": "b453dc7a883a4bb8961e7fc199649362",
      "End": "e753f5ce0d424c259423bfcf6b12ba99",
      "Id": "65c89aaea18d4c5689879a8a0331e1cf",
      "IsHidden": "False"
    },
    {
      "Start": "4932e867dec4491c8f6f337d62478873",
      "End": "departmentPolygonsList",
      "Id": "pythonToDeptSelector",
      "IsHidden": "False"
    },
    {
      "Start": "4932e867dec4491c8f6f337d62478873",
      "End": "programPolygonsList",
      "Id": "pythonToProgSelector",
      "IsHidden": "False"
    },
    {
      "Start": "4932e867dec4491c8f6f337d62478873",
      "End": "circulationPathsList",
      "Id": "pythonToCircSelector",
      "IsHidden": "False"
    },
    {
      "Start": "outputSelector0Out",
      "End": "departmentPolygonsIndex",
      "Id": "selector0ToDeptSelector",
      "IsHidden": "False"
    },
    {
      "Start": "outputSelector1Out",
      "End": "programPolygonsIndex",
      "Id": "selector1ToProgSelector",
      "IsHidden": "False"
    },
    {
      "Start": "outputSelector2Out",
      "End": "circulationPathsIndex",
      "Id": "selector2ToCircSelector",
      "IsHidden": "False"
    },
    {
      "Start": "departmentPolygonsOutput",
      "End": "14ea4f55abc84b75810a6ba596fff9cb",
      "Id": "deptSelectorToWatch",
      "IsHidden": "False"
    },
    {
      "Start": "programPolygonsOutput",
      "End": "programPolygonsInput",
      "Id": "progSelectorToWatch",
      "IsHidden": "False"
    },
    {
      "Start": "circulationPathsOutput",
      "End": "circulationPathsInput",
      "Id": "circSelectorToWatch",
      "IsHidden": "False"
    },
    {
      "Start": "4932e867dec4491c8f6f337d62478873",
      "End": "geometryInput",
      "Id": "pythonToTranslator",
      "IsHidden": "False"
    },
    {
      "Start": "translatedGeometry",
      "End": "geometryToDisplay",
      "Id": "translatorToDisplay",
      "IsHidden": "False"
    },
    {
      "Start": "xOffsetOut",
      "End": "xTranslation",
      "Id": "xOffsetToTranslator",
      "IsHidden": "False"
    },
    {
      "Start": "yOffsetOut",
      "End": "yTranslation",
      "Id": "yOffsetToTranslator",
      "IsHidden": "False"
    },
    {
      "Start": "zOffsetOut",
      "End": "zTranslation",
      "Id": "zOffsetToTranslator",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "EnableLegacyPolyCurveBehavior": true,
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "3.5",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "9.1",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "3.5.0.8297",
      "RunType": "Automatic",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "be1c7d402b074a47b1092f29a30f547a",
        "Name": "JSON File Path",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 170.5,
        "Y": 118.5
      },
      {
        "Id": "271d53b4e3b949a39712a84017723ad0",
        "Name": "Design Seed",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 160.07558393153795,
        "Y": -186.98007296681192
      },
      {
        "Id": "e0ba4d89132742aabb70a0b892badad5",
        "Name": "Circulation Factor",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 162.77208860752694,
        "Y": -474.993750337704
      },
      {
        "Id": "1d28c5f1e3bc4ada98e3438546b6deb5",
        "Name": "Acceptable Width",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 163.61538635541876,
        "Y": -611.055517767347
      },
      {
        "Id": "f2dc91b0831d4fe8b6bd625614344175",
        "Name": "Architect Plus Spaceplanning",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 786.2950503416565,
        "Y": -507.8619011368596
      },
      {
        "Id": "d165e94d4ac1437280da404ce24df970",
        "Name": "Department Polygons",
        "IsSetAsInput": false,
        "IsSetAsOutput": true,
        "Excluded": false,
        "ShowGeometry": true,
        "X": 1217.9793792836272,
        "Y": -487.6421356291894
      }
    ],
    "Annotations": [],
    "X": 187.59342086759523,
    "Y": 571.7053883680479,
    "Zoom": 0.6125772630256267
  }
}